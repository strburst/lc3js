// vim: set ft=javascript:
// This is a PEG.js parser generator template

// A program is simply a list of one or more instruction blocks
Program = InstrBlock+

// An instruction block consists of a list of instructions surrounded by the .orig and .end pseudo-ops
InstrBlock = EndLine* '.orig' _ addr:Number EndLine instructions:(Instruction / EndLine)* '.end' EndLine* {
  // Remove all the falsy values (i.e. the null elements from empty lines/comments)
  instructions = instructions.filter(function(elem) {
    return elem;
  });

  return {
    start: addr,
    instructions: instructions
  };
}

// Each instruction has an optional label before it or comment after it
Instruction 'any well-formed instruction' = _? label:LabelDef? _? instr:BaseInstr _? EndLine {
  if (label) {
    instr.label = label;
  }
  return instr;
}

// Look for instructions from most to least arguments (although this is not important currently)
BaseInstr = ThreeArgInstr / TwoArgInstr / OneArgInstr / ZeroArgInstr

// --- Three argument instructions ---
ThreeArgInstr = ADD / AND / LDR / STR

// ADD and AND have identical arguments
ADD = ADDANDI / ADDANDR
AND = ADDANDI / ADDANDR

ADDANDI = name:('ADD'i / 'AND'i) _ dest:Register ArgSep sr1:Register ArgSep imm:Number {
  return {
    operation: name.toUpperCase(),
    destReg: dest,
    srcReg: sr1,
    immediate: imm
  };
}

ADDANDR = name:('ADD'i / 'AND'i) _ dest:Register ArgSep sr1:Register ArgSep sr2:Register {
  return {
    operation: name.toUpperCase(),
    destReg: dest,
    srcReg1: sr1,
    srcReg2: sr2
  };
}

// LDR and STR have identical arguments
LDR = LDRSTR
STR = LDRSTR

LDRSTR = name:('LDR'i / 'STR'i) _ dest:Register ArgSep base:Register ArgSep offset:Number {
  return {
    operation: name.toUpperCase(),
    destReg: dest,
    baseReg: base,
    offset: offset
  };
}

// --- Two argument instructions ---
TwoArgInstr = LD / LDI / LEA / NOT / ST / STI

// LD, LDI, and LEA have identical arguements
LD = DRLABELFROM
LDI = DRLABELFROM
LEA = DRLABELFROM

DRLABELFROM = name:('LD'i / 'LDI'i / 'LEA'i) _ dest:Register ArgSep from:Label {
  return {
    operation: name.toUpperCase(),
    destReg: dest,
    fromLabel: from
  };
}

NOT = 'NOT'i _ src:Register ArgSep dest:Register {
  return {
    operation: 'NOT',
    destReg: dest,
    srcReg: src
  };
}

// ST and STI have identical arguments
ST = DRLABELINTO
STI = DRLABELINTO

DRLABELINTO = name:('ST'i / 'STI'i) _ dest:Register ArgSep into:Label {
  return {
    operation: name.toUpperCase(),
    destReg: dest,
    intoLabel: into
  };
}

// --- One argument instructions ---
OneArgInstr = BR / JMP / JSR / JSRR // / RTI / TRAP

BR = 'BR'i cc:ConditionCode _ goto:Label {
  return {
    operation: 'BR',
    conditionCode: cc,
    goto: goto
  };
}

ConditionCode = n:'n'? z:'z'? p:'p'? {
  if (n || z || p) {
    return { n: !!n, z: !!z, p: !!p }
  } else {
    // BR with no condition code is considered an unconditional branch
    return { n: true, z: true, p: true }
  }
}

JMP = 'JMP'i _ rnum:Register {
  return {
    operation: 'JMP',
    register: rnum
  };
}

JSR = 'JSR'i _ goto:Label {
  return {
    operation: 'JSR',
    goto: goto
  };
}

JSRR = 'JSRR'i _ rnum:Register {
  return {
    operation: 'JSRR',
    register: rnum
  };
}


ZeroArgInstr = NOP / RET

// NOP is typically represented as a BR that never activates
NOP = 'NOP'i {
  return {
    operation: 'BR',
    conditionCode: {
      n: false, z: false, p: false
    }
  };
}

// RET is a special case of JMP (i.e. 'JMP R7')
RET = 'RET'i {
  return {
    operation: 'JMP',
    register: 7
  };
}

// --- Basic definitions ---
Register 'register designation' = 'R'i n:DecNumber {
  return n;
}

Number 'number (hex or decimal)' = HexNumber / DecNumber

DecNumber 'number (decimal)' = digits:[0-9]+ {
  return parseInt(digits.join(''), 10);
}

HexNumber 'number (hex)' = hex:'x' hdigits:[0-9A-Fa-f]+ {
  if (hex) {
    return parseInt(hdigits.join(''), 16);
  } else {
    return n;
  }
}

// Comments begin with semicolons and continue until the next line break
Comment 'comment line' = _? ';' NonBreak? Break {
  return null;
}

// Separator between registers (i.e. the comma in 'NOT R1, R1')
ArgSep 'separator between arguments' = _? ',' _?

_ 'non-break whitespace separator' = [ \t]+

LabelDef 'label definition' = name:Label (EndLine+ / _) {
  return name;
}

// A label is any token that is not also an instruction or pseudo-op
Label 'label token' = !'.' !'ADD'i !'AND'i !'BR'i !'JMP'i !'JSR'i !'JSRR'i !'LD'i !'LDR'i !'LEA'i !'NOP'i !'NOT'i !'RET'i !'RTI'i !'ST'i !'STI'i !'STR'i !'TRAP'i token:Token {
  return token;
}

// Valid identifiers are made of non-whitespace characters
Token 'non-whitespace identifier' = token:[^ \t\n\r]+ {
  return token.join('');
}

// Anything that's not a line break
NonBreak = [^\n\r]+

// Lines can end with some optional whitespace and a line break or comment
EndLine = _? (Break / Comment) {
    return null;
}

// One or more line breaks (dos or unix)
Break 'line breaking whitespace' = [\n\r]+
